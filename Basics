Chapter 1 : Goals of OOPS

OOPS:
"Object technology is the combination of four core ideas: a structuring method, a
reliability discipline, an epistemological principle and a classification technique". 

                      OOPS
                       |
                       |
---Structure, reliability, epistemology and classification---

Page: 8

Structure:
  The structuring method applies to software decomposition and reuse.
                      Structure
                         |
                         |
            software decomposition and reuse

  Decomposition: Process of breaking down the something complex into simpler and manageable one. 
  Software decomposition : software decomposition is a process of beaking down the system into simpler and manageble modules or components,
                           simplifying the design, development, testing, and maintenance of the software system. 

Class covers here

Reliability :

  what is reliability? , reliability something we can trust , that it will do what is suppose to do, without unexpected failures.
  
  Reliability discipline : is a approach/ablity of software system do what is suppose to do , without unexpected failures.

contract covers here

Epistemological principle:

  Its a idea of describing an object by its external feature rather than internal working and implementation.
  
  This principle asks a question , how do we describe a classes ?
  
  In object technology object is descibed by its class , what we can do with it(features).
  
  Example: Sort() is a class , where sort object  describes that we can do sorting activity using this class , here the internal working and implementation is 
  not described rather its gives a general and external feature that this object do sorting.
  
  Abstraction , modularity , encapsulation cover these area.

Classification technique:

  Classification technique is process of organizing and categorizing the object in a hierarchies based on their characteristics and behaviors.
  This helps in managing and structuring complex system by grouping related objects together.

  InHeritance cover these area.

-------------------------------------------------------------------------------------------------


Software Quality:

 Engineering seeks quality,software engineering is the production of quality software.

  We all want our software systems to be fast, reliable, easy to use, readable, modular,
  structured and so on. But these adjectives describe two different sorts of qualities.

               Software Quality
                      |
                      |
        EXTERNAL AND INTERNAL FACTORS

  1.User want's software to be speed , ease of use. these are called EXTERNAL factors.
  2. Other quality's like readable, modular are INTERNAL FACTORS , these factors are cared for Software devlopers who are accessing the software code.
  
  In the End only External factor matters. only EXTERNAL factors are will used to scale a application from user end.
  
  But the key to achieving these external factors is in the internal ones

      INTERNAL FACTORS
            |  
            |
Correctness,Robustness,Extendibility,Reusability,Compatibility,Efficiency,Portability,Ease of use,Functionality,Timeliness


Correctness: 
 Correctness is ability of software system that it should do perform its task. as per the system requirement.
Robustness:
 Robustness is a ability of software system that it should handle the unexpected/abnormal/out of scope situation.   
  an abnormal case is simply a case that is not covered by the specification or requirement.
Extendibility: 
  Extendibility is ease of adapting software system to the new change in requiremnt /specification.
  a software system should be designed with simple design and decentralised.
Reusability:
  Reusability is a ability of software components to reused in many other software appliaction.
Compatibility:
  Compatibility is ease of combining software elements with others.
Efficiency:
  Efficiency is a ability of a software system . which considers processing time and space occupied.
Portability:
 Portability is the ease of transferring software products to various hardware
 and software environments.
Ease of use:
  Ease of use is the ease with which people of various backgrounds and
 qualifications can learn to use software products and apply them to solve
 problems. It also covers the ease of installation, operation and monitoring. 
Functionality:
  Functionality is the extent of possibilities provided by a system.
Timeliness:
  Timeliness is the ability of a software system to be released when or before
  its users want it


Documentation:
• The need for external documentation, which enables users to understand the power
of a system and use it conveniently, is a consequence of the definition of ease of use. 
• The need for internal documentation, which enables software developers to
understand the structure and implementation of a system, is a consequence of the
extendibility requirement. 
• The need for module interface documentation, enabling software developers to
understand the functions provided by a module without having to understand its
implementation, is a consequence of the reusability requirement. It also follows from
extendibility, as module interface documentation makes it possible to determine
whether a certain change need affect a certain module.


Correctness and robustness -->reliability
Extendibility and reusability--> modularity

SOFTWARE MAINTENANCE
Maintenance is what happens after a software product has been delivered.
Discussions of software methodology tend to focus on the development phase; so do
introductory programming courses. But it is widely estimated that 70% of the cost of
software is devoted to maintenance.

Chapter 2 : Criteria of OOPS

->what makes a system object-oriented?
 
->criteria for assessing objectness

• The use of object-oriented concepts for analysis and design only, with a method and
notation that cannot be used to write executable software. 
• The use of an object-oriented programming language which is not suitable for
analysis and design. 

An object-oriented language and environment, together with the supporting
method, should apply to the entire lifecycle, in a way that minimizes the gaps
between successive activities.

Classes as modules:
Object orientation is primarily an architectural technique: its major effect is on the
modular structure of software systems. 
The key role here is again played by classes. A class describes not just a type of
objects but also a modular unit. In a pure object-oriented approach: Classes should be the only modules.

Classes as types:
Every type should be based on a class.

Single inheritance:
Software development involves a large number of classes; many are variants of others. To
control the resulting potential complexity, we need a classification mechanism, known as
inheritance.


----------------------------------The road to object orientation-------------------------

Modularity:

This chapter introduces a set of complementary properties: five criteria, five rules and five principles of modularity.

FIVE CRITERIA

A design method worthy of being called “modular” should satisfy five fundamental
requirements, explored in the next few sections: 
• Decomposability. 
• Composability. 
• Understandability. 
• Continuity. 
• Protection.

Modular decomposability:

Imagine you have a big problem to solve, like building a complicated piece of software. It's too overwhelming to tackle all at once, so you break it down into 
smaller, more manageable parts or "subproblems."
However, even these smaller parts can still be pretty tricky on their own. So, you might need to break them down further into even smaller pieces. This process can
repeat until each piece is simple enough to handle.
Now, once you have these smaller pieces, you can assign different people or groups to work on them. This is like dividing up the work so that everyone can focus on 
their own part.
But here's the tricky part: these smaller pieces shouldn't rely too much on each other. If they do, it could slow down the progress because one piece can't move
forward until another is done.
Also, it's really important to understand how these pieces are related to each other. If we miss any connections between them, we might end up with individual parts
that work okay by themselves but don't fit together properly to solve the original big problem.

So, in simple terms, the passage is basically saying that when we're solving big problems by breaking them into smaller parts, we need to make sure those parts are 
simple enough to handle and don't rely too much on each other. Plus, we need to understand how they all fit together in the end.


Top-down design follows is the principle of decomposability by breaking down the system into smaller,manageable parts, the inclusion of a global initialization module 
undermines this principle by creating interdependencies between modules and compromising their autonomy

Modular composability:

The concept of composability in software design, which is the opposite of decomposability.
While decomposability focuses on breaking down complex systems into smaller subsystems, 
composability deals with extracting existing software elements from their original context to be reused in different contexts.

Composability vs. Decomposability: 
Composability addresses the reverse process of decomposability. Instead of breaking down a complex system into smaller parts, composability involves extracting
existing software elements from their original design context to be reused elsewhere.

Composability in software design aims to make software elements independent enough to be extracted and reused in different contexts, thus promoting reusability and
efficiency in development

The relationship between composability and decomposability in modular design methods:

1. **Independence of Composability and Decomposability**:
   - Composability and decomposability are two separate criteria for evaluating modular design methods.
   - They are often at odds with each other, meaning that a method that excels in one criterion may not necessarily perform well in the other.
   - For example, top-down design, which is favored for decomposability, may not inherently support composability.

2. **Top-Down Design and Decomposability**:
   - Top-down design involves breaking down a complex system into smaller, more manageable modules or subsystems.
   - While this approach is effective for decomposing a problem into smaller parts, the resulting modules may not be easily combinable with modules from other 
     sources.
   - This is because top-down design typically focuses on developing each module to fulfill a specific requirement or subproblem identified during the refinement 
      process.
   - As a result, these modules may be closely tied to the immediate context in which they were developed and may not be adaptable to other contexts.

3. **Limitations of Top-Down Design**:
   - Top-down design lacks mechanisms for making modules more general than immediately required or for identifying commonalities and redundancies between modules 
     obtained from different parts of the hierarchy.
   - It does not provide hints or incentives for designing modules with broader applicability beyond their original context.

4. **Complementarity of Composability and Decomposability**:
   - The fact that both composability and decomposability are necessary criteria for a modular method reflects the need for a balance between top-down and bottom-up 
      reasoning.
   - This balance acknowledges the importance of both breaking down complex problems into manageable parts (decomposability) and ensuring that these parts can be 
      easily combined and reused in different contexts (composability).

In summary, the passage highlights the challenges of achie.ving both composability and decomposability in modular design methods and emphasizes the complementary 
    nature of these criteria, which reflect the balance between top-down and bottom-up reasoning in software design.

Modular Understandability:

Modular Understandability refers to the ease with which a human reader can understand each module of the software without necessarily having to know about
the other modules.Ideally, a reader should be able to understand a module in isolation or by examining only a few related modules.

Modular Continuity:
Modular Continuity is a criterion that emphasizes the importance of ensuring that small changes in problem specifications lead to proportionally small changes
in the structure of software systems. This criterion is crucial for achieving extendibility and adaptability in software development.

Modular protection:
A method satisfies Modular Protection if it yields architectures in which the effect of an abnormal condition occurring at run time in a module will remain
confined to that module, or at worst will only propagate to a few neighboring modules.

FIVE RULES 
From the preceding criteria, five rules follow which we must observe to ensure
modularity: 
• Direct Mapping. 
• Few Interfaces. 
• Small interfaces (weak coupling). 
• Explicit Interfaces. 
• Information Hiding.

The first rule addresses the connection between a software system and the external
systems with which it is connected; the next four all address a common issue — how
modules will communicate. Obtaining good modular architectures requires that
communication occur in a controlled and disciplined way.

Direct Mapping :
ensuring compatibility between the modular structure of a software system and the modular representation of the problem domain is essential for effectively
addressing the needs of the problem domain, managing changes, and leveraging insights gained during problem domain analysis for software design. 
This alignment helps achieve continuity and facilitates the modular decomposition of the software.

Few Interfaces:

The Few Interfaces rule restricts the overall number of communication channels between
modules in a software architecture.Communication may occur between modules in a variety of ways. Modules may call
each other (if they are procedures), share data structures etc. The Few Interfaces rule limits
the number of such connections.

Case (A) : way to reach the minimum number of links, n –
1, through an extremely centralized structure: one master module; everybody else talks to
it and to it only. 

Case (C) :which has almost the same number of links. In this scheme, every module just talks to its two immediate neighbors, but there is no central authority. 
Such a style of design is a little surprising at first, since it does not conform to the traditional model of functional, top-down design. But it can yield robust, 
extendible architectures; this is the kind of structure that object-oriented techniques, properly applied, will tend to yield. 

Small Interfaces:
The "Small Interfaces" or "Weak Coupling" rule, which emphasizes minimizing the amount of information exchanged between modules in a software system.
The Small Interfaces rule focuses on limiting the size of intermodule connections, meaning that when two modules communicate, they should exchange as little
information as possible.

Explicit Interfaces:
With the fourth rule, we go one step further in enforcing a totalitarian regime upon the
society of modules: not only do we demand that any conversation be limited to few
participants and consist of just a few words; we also require that such conversations must
be held in public and loudly

The "Explicit Interfaces" rule emphasizes the importance of clearly documenting and making visible any communication or dependency between modules within 
a software system. This transparency facilitates modularity by ensuring that interactions between modules are explicit and understandable, even when they 
involve data sharing or other forms of indirect coupling.

Information Hiding:

Information Hiding is a crucial principle in software design that emphasizes limiting access to a module's internal details, separating specification from 
implementation, and ensuring continuity and modularity in software systems. It focuses on defining clear interfaces between modules to facilitate 
independent development and minimize the impact of changes.
The primary goal of Information Hiding is to ensure continuity in software systems. By limiting changes to a module's secret elements, the public 
interface can remain unchanged, minimizing the impact on client modules.


FIVE PRINCIPLES
From the preceding rules, and indirectly from the criteria, five principles of software
construction follow: 
• The Linguistic Modular Units principle.
• The Self-Documentation principle.
• The Uniform Access principle. 
• The Open-Closed principle. 
• The Single Choice principle. 


Linguistic Modular Units:
The Linguistic Modular Units principle underscores the need for a language or formalism that supports modularity at all levels of software development.
Using such a language ensures consistency, continuity, decomposability, composability, and error protection throughout the development process.

Self-Documentation:
The designer of a module should strive to make all information about themodule part of the module itself.
 If the software and its documentation are treated as separate entities, it is difficult to guarantee that they will remain compatible— “in sync” — when things
start changing. Keeping everything at the same place,although not a guarantee, is a good way to help maintain this compatibility.

Uniform Access principle:
All services offered by a module should be available through a uniform
notation, which does not betray whether they are implemented through
storage or through computation.

Open-Closed principle:

The Open Closed principle in software design, which revolves around the concepts of openness and closure of modules.

1. **Openness**:
   - In software development, a module (a unit of code) is considered open if it can still be extended or modified in the future. This means that developers have the
     flexibility to add new functionalities or make changes to the existing code without fundamentally altering its structure.
   - Openness is important because it allows developers to adapt the module to accommodate future requirements or changes in the software system.

2. **Closure**:
   - Conversely, a module is considered closed when it's available for use by other modules in the system. This means that the module has a stable and well-defined 
    interface, making it suitable for integration with other parts of the software.
   - Closure involves finalizing the module's design, compiling it into executable code, and making it available for use by other modules.

The passage highlights the conflicting nature of these two goals:

- **Openness**: Developers want modules to remain open so they can easily make changes or extend their functionalities as needed.
- **Closure**: Project managers want modules to be closed so that other developers can start using them without waiting indefinitely for further modifications.

The passage emphasizes that achieving both openness and closure simultaneously can be challenging. Keeping a module open for future changes may delay its usability 
by other modules, while closing it too early may lead to unexpected changes or dependencies in other parts of the system if modifications are later required.

In summary, the Open Closed principle underscores the need to strike a balance between allowing for future extensibility and ensuring the stability and usability of 
modules in a software system. It encourages developers to design modules that are flexible enough to accommodate future changes while also providing a stable and 
well-defined interface for integration with other modules.

But how can we have modules that are both open and closed? How can we keep A
and everything in the top part of the figure unchanged, while providing A' to the bottom
clients, and avoiding duplication of software? The object-oriented method will offer a
particularly elegant contribution thanks to inheritance. 

Yes ,inheritance solves the problem of balancing both open and closed module.

To get us out of the change or redo dilemma, inheritance will allow us to
define a new module A' in terms of an existing module A by stating the differences only.
We will write A' as

                class A' inherit
                      A redefine f, g, … end
                feature
                      f …
                      g …
                      …
                      u …
                      …
                end
where the feature clause contains both the definition of the new features specific to A', 
such as u, and the redefinition of those features (such as f, g, …) whose form in A' is
different from the one they had in A. 

Thanks to inheritance, O-O developers can adopt a much more incremental approach
to software development than used to be possible with earlier methods.


Single Choice :

Certainly! Let's break down the passage into simpler terms:

The passage discusses the Single Choice principle in software design, which addresses situations where a software system needs to support a set of alternatives. 
For example, in a system managing a library, there may be different types of publications like books, journal articles, or conference proceedings.

1. **Understanding the Example**:
   - Imagine we're building a system to manage a library that handles different types of publications. We define a type called `PUBLICATION` in Pascal-Ada syntax, 
      which has common fields like `author`, `title`, and `publication_year`, along with specific variants like `book`, `journal`, and `conference_proceedings`. 
      Each variant has its own set of additional fields.

2. **Openness and Closure**:
   - We want modules to be open for future changes (like adding new variants), but we also need them to be closed for current usage by other modules. 
      This means we want flexibility for future modifications while ensuring stability and usability for current integration.

3. **The Issue**:
   - The problem arises when a change, like adding a new variant to `PUBLICATION`, affects multiple client modules. For example, if we add a new type of publication 
      like "technical reports," we must update the `PUBLICATION` type in the main module and also update all client modules that manipulate `PUBLICATION` objects.

4. **The Single Choice Principle**:
   - To address this issue, the Single Choice principle suggests that only one module in the system should know the exhaustive list of alternatives (variants). 
      This module becomes the central point for managing changes to the list of choices.
   - In our example, only the main module (`A`) should know the list of publication variants. If we need to add a new variant, we only update this main module (`A`).
    Client modules (`B`, `C`, etc.) don't need to know the entire list of variants; they only need to know how to handle the variants they're designed to work with.

5. **Implications and Importance**:
   - The Single Choice principle is crucial for software evolution and maintenance. It helps prevent a chain reaction of changes across multiple modules when adding
      or modifying variants.
   - It also promotes a need-to-know policy, limiting the amount of information available to each module, which is essential for creating solid and reusable software
      architectures.
   - The principle aligns with the Open-Closed principle and serves as a strong form of Information Hiding, as it hides detailed information about variants from 
      client modules.

Once again, as the publications example shows, traditional methods do not provide
a solution; once again, object technology will show the way, here thanks to two techniques
connected with inheritance: polymorphism and dynamic binding. No sneak preview in
this case, however; these techniques must be understood in the context of the full method

In summary, the Single Choice principle emphasizes the importance of centralizing knowledge about alternative choices in one module to simplify software evolution
and promote modularity. It helps manage changes effectively while maintaining a stable and flexible software system.


